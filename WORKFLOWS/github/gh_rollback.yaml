# GitHub Rollback Workflow
# Revert to any previous checkpoint or commit safely

meta:
  workflow_id: "gh-rollback-v1"
  version: "1.0.0"
  purpose: "Safe rollback to previous checkpoints with history preservation"
  author: "Atomic Workflow System"
  created: "2025-10-06"

inputs:
  - name: target
    kind: text
    description: "Rollback target: checkpoint_id, commit_sha, tag, or relative time"
    required: true

  - name: reason
    kind: text
    description: "Reason for rollback"
    required: true

  - name: branch
    kind: text
    description: "Branch to rollback (defaults to current)"
    required: false

  - name: preserve_history
    kind: boolean
    description: "Use revert instead of reset (preserves history)"
    default: true

outputs:
  - name: rollback_sha
    kind: text
    description: "Commit SHA after rollback"

  - name: rollback_report
    kind: json
    description: "Rollback operation details"

atoms:
  - atom_uid: "01JADW6T0000000000000000I1"
    atom_key: "workflows/gh-rollback/v1/resolve/all/001"
    title: "Resolve rollback target"
    runtime:
      language: bash
      entrypoint: |
        #!/usr/bin/env bash
        set -euo pipefail

        TARGET="${inputs['target']}"
        CURRENT_BRANCH="${inputs['branch']:-$(git branch --show-current)}"

        # Resolve target to commit SHA
        if [[ "$TARGET" =~ ^[0-9a-f]{40}$ ]]; then
          # Already a full SHA
          TARGET_SHA="$TARGET"
        elif [[ "$TARGET" == checkpoint:* ]]; then
          # Checkpoint ID from registry
          CHECKPOINT_ID="${TARGET#checkpoint:}"
          TARGET_SHA=$(jq -r ".checkpoint_id" < .workflows/checkpoints/registry.jsonl | \
            grep "$CHECKPOINT_ID" | head -1 || echo "")
          if [[ -z "$TARGET_SHA" ]]; then
            echo "ERROR: Checkpoint not found"
            exit 1
          fi
        elif [[ "$TARGET" =~ ^[0-9]+\ (minute|hour|day)s?\ ago$ ]]; then
          # Relative time
          TARGET_SHA=$(git rev-list -1 --before="$TARGET" HEAD)
        else
          # Try as ref (tag, branch, etc.)
          TARGET_SHA=$(git rev-parse "$TARGET" 2>/dev/null || echo "")
          if [[ -z "$TARGET_SHA" ]]; then
            echo "ERROR: Invalid target: $TARGET"
            exit 1
          fi
        fi

        # Validate SHA exists
        if ! git cat-file -e "$TARGET_SHA" 2>/dev/null; then
          echo "ERROR: Target SHA does not exist: $TARGET_SHA"
          exit 1
        fi

        outputs['target_sha']=$TARGET_SHA
        outputs['current_branch']=$CURRENT_BRANCH

        echo "Rollback target: $TARGET_SHA"
    inputs: [target, branch]
    outputs: [target_sha, current_branch]

  - atom_uid: "01JADW6T0000000000000000I2"
    atom_key: "workflows/gh-rollback/v1/branch/all/002"
    title: "Create rollback branch"
    runtime:
      language: bash
      entrypoint: |
        #!/usr/bin/env bash
        set -euo pipefail

        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        ROLLBACK_BRANCH="rollback/${TIMESTAMP}"

        git checkout -b "$ROLLBACK_BRANCH" "${inputs['target_sha']}"

        outputs['rollback_branch']=$ROLLBACK_BRANCH

        echo "Created rollback branch: $ROLLBACK_BRANCH"
    deps: ["01JADW6T0000000000000000I1"]
    inputs: [target_sha]
    outputs: [rollback_branch]

  - atom_uid: "01JADW6T0000000000000000I3"
    atom_key: "workflows/gh-rollback/v1/execute/all/003"
    title: "Execute rollback operation"
    runtime:
      language: bash
      entrypoint: |
        #!/usr/bin/env bash
        set -euo pipefail

        TARGET_SHA="${inputs['target_sha']}"
        CURRENT_SHA=$(git rev-parse HEAD)
        PRESERVE="${inputs['preserve_history']}"
        BRANCH="${inputs['current_branch']}"

        if [[ "$BRANCH" == "main" ]] || [[ "$BRANCH" == "master" ]]; then
          # Protected branch - always preserve history
          PRESERVE=true
          echo "Protected branch detected - forcing history preservation"
        fi

        if [[ "$PRESERVE" == "true" ]]; then
          # Use revert to preserve history
          echo "Creating revert commits..."

          # Get commit range
          COMMIT_RANGE="${TARGET_SHA}..${CURRENT_SHA}"

          # Revert commits in reverse order
          git revert --no-edit $COMMIT_RANGE

          ROLLBACK_METHOD="revert"
        else
          # Hard reset (destructive)
          echo "Performing hard reset..."
          git reset --hard "$TARGET_SHA"
          git clean -fd

          ROLLBACK_METHOD="reset"
        fi

        NEW_SHA=$(git rev-parse HEAD)

        outputs['rollback_method']=$ROLLBACK_METHOD
        outputs['new_sha']=$NEW_SHA

        echo "Rollback complete: $NEW_SHA"
    deps: ["01JADW6T0000000000000000I2"]
    inputs: [target_sha, preserve_history, current_branch]
    outputs: [rollback_method, new_sha]

  - atom_uid: "01JADW6T0000000000000000I4"
    atom_key: "workflows/gh-rollback/v1/validate/all/004"
    title: "Validate rollback state"
    runtime:
      language: bash
      entrypoint: |
        #!/usr/bin/env bash
        set -euo pipefail

        # Run basic validation
        echo "Running validation..."

        VALIDATION_PASSED=true

        # Check if repo is in good state
        if ! git status &>/dev/null; then
          VALIDATION_PASSED=false
        fi

        # Run tests if available
        if [[ -f "pytest.ini" ]] || [[ -d "tests" ]]; then
          pytest --maxfail=1 || VALIDATION_PASSED=false
        fi

        outputs['validation_passed']=$VALIDATION_PASSED

        echo "Validation: $VALIDATION_PASSED"
    deps: ["01JADW6T0000000000000000I3"]
    outputs: [validation_passed]

  - atom_uid: "01JADW6T0000000000000000I5"
    atom_key: "workflows/gh-rollback/v1/push/all/005"
    title: "Push rollback branch"
    runtime:
      language: bash
      entrypoint: |
        #!/usr/bin/env bash
        set -euo pipefail

        if [[ "${inputs['validation_passed']}" == "true" ]]; then
          ROLLBACK_BRANCH="${inputs['rollback_branch']}"

          git push -u origin "$ROLLBACK_BRANCH"

          outputs['pushed']=true
          echo "Rollback branch pushed: $ROLLBACK_BRANCH"
        else
          outputs['pushed']=false
          echo "Validation failed - not pushing rollback"
        fi
    deps: ["01JADW6T0000000000000000I4"]
    inputs: [validation_passed, rollback_branch]
    outputs: [pushed]

  - atom_uid: "01JADW6T0000000000000000I6"
    atom_key: "workflows/gh-rollback/v1/report/all/006"
    title: "Generate rollback report"
    runtime:
      language: python
      entrypoint: |
        import json
        from datetime import datetime

        report = {
          'rollback_id': f"rollback_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
          'target': inputs['target'],
          'target_sha': inputs['target_sha'],
          'reason': inputs['reason'],
          'method': inputs['rollback_method'],
          'rollback_branch': inputs['rollback_branch'],
          'new_sha': inputs['new_sha'],
          'validation_passed': inputs['validation_passed'],
          'pushed': inputs['pushed'],
          'timestamp': datetime.now().isoformat()
        }

        # Append to rollback registry
        with open('.workflows/rollbacks/registry.jsonl', 'a') as f:
          f.write(json.dumps(report) + '\n')

        outputs['rollback_sha'] = inputs['new_sha']
        outputs['rollback_report'] = report

        print(f"\nRollback completed: {inputs['rollback_branch']}")
    deps: ["01JADW6T0000000000000000I5"]
    inputs: [target, target_sha, reason, rollback_method, rollback_branch, new_sha,
             validation_passed, pushed]
    outputs: [rollback_sha, rollback_report]

safety:
  - "Never destructive resets on main/master/production"
  - "Always preserve history on protected branches"
  - "Always validate before finalizing"
  - "Always create audit trail"
