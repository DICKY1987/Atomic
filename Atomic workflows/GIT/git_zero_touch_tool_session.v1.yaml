# git_zero_touch_tool_session.v1.yaml
meta:
  version: "1.0.0"
  purpose: "Zero-touch Git safety for individual AI CLI sessions (Claude Code, Codex, Gemini), using Git + GitHub CLI."
  author: "ChatGPT"
  created: "2025-09-30"
  applies_to:
    - "Claude Code CLI"
    - "OpenAI Codex CLI (or equivalent)"
    - "Gemini CLI (or equivalent)"
    - "GitHub CLI (gh)"
  notes: |
    This file is machine-readable: it declares files to materialize and commands to run.
    Strings under 'content' can be written directly to disk by an installer.
    Tool commands are placeholders; update 'tool_exec' for your local binaries if names differ.

prerequisites:
  git:
    required: true
    min_version: "2.34"
  github_cli:
    command: "gh"
    required: true
  shell:
    windows: "PowerShell 7+"
    unix: "bash/zsh"
  repo_assumptions:
    - "Repository is already initialized with a remote named 'origin'."
    - "You have push permissions to the remote."
    - "Default branch is 'main' (configure under git.config if different)."

git:
  config:
    local_ini: |
      [branch]
        autosetuprebase = always
      [pull]
        rebase = true
      [push]
        default = current
        autoSetupRemote = true
        followTags = true
      [merge]
        conflictstyle = zdiff3
        ff = false
      [rebase]
        autoStash = true
        autoSquash = true

files:
  # ---------- GIT HOOKS ----------
  - path: ".git/hooks/pre-close"
    os: ["linux","mac"]
    mode: "0755"
    content: |
      #!/usr/bin/env bash
      set -euo pipefail
      WORK_IN_PROGRESS=$(git status --porcelain)
      if [ -n "$WORK_IN_PROGRESS" ]; then
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        TOOL_NAME=${AI_TOOL_NAME:-"unknown"}
        git add -A
        git commit -m "WIP: Auto-save from ${TOOL_NAME} [${TIMESTAMP}]"                     -m "Auto-checkpoint before session end"                     --no-verify || true
        BACKUP_BRANCH="wip/${TOOL_NAME}/${TIMESTAMP}"
        git push -u origin HEAD:${BACKUP_BRANCH} --no-verify 2>/dev/null || true
        echo "saved:${BACKUP_BRANCH}"
      fi
  - path: ".git/hooks/post-commit"
    os: ["linux","mac","windows"]
    mode: "0755"
    content: |
      #!/usr/bin/env bash
      git push origin HEAD:refs/heads/auto-backup/$(git branch --show-current) --force-with-lease 2>/dev/null || true

  # ---------- POWERSHELL PROFILE SNIPPET ----------
  - path: ".det-tools/profiles/ZeroTouchGitProfile.ps1"
    os: ["windows"]
    mode: "0644"
    content: |
      # Zero-touch Git safety on PowerShell exit
      $env:AI_TOOL_NAME = "generic"
      Register-EngineEvent -SourceIdentifier PowerShell.Exiting -Action {
        try {
          if (Test-Path .git) {
            $ts = Get-Date -Format "yyyyMMdd_HHmmss"
            git add -A | Out-Null
            git commit -m "WIP: Auto-save on exit [$ts]" --no-verify | Out-Null
            $branch = git branch --show-current
            if (-not [string]::IsNullOrEmpty($branch)) {
              git push origin "HEAD:refs/heads/wip/$branch" --force-with-lease | Out-Null
            }
          }
        } catch { }
      }
      function gacp-safe([string]$message = "WIP: $(Get-Date -Format 'HH:mm')") {
        git add -A
        git commit -m $message --no-verify
        git push origin HEAD --force-with-lease
      }
      function Start-ToolSafe([Parameter(Mandatory)][string]$tool_exec, [Parameter(ValueFromRemainingArguments=$true)][string[]]$args) {
        $env:AI_TOOL_NAME = [System.IO.Path]::GetFileNameWithoutExtension($tool_exec)
        & git add -A | Out-Null
        & git commit -m "checkpoint: before $($env:AI_TOOL_NAME)" --no-verify | Out-Null
        & $tool_exec @args
        & git add -A | Out-Null
        & git commit -m "checkpoint: after $($env:AI_TOOL_NAME)" --no-verify | Out-Null
        & git push origin HEAD --force-with-lease | Out-Null
      }
      Set-Alias tool-safe Start-ToolSafe

  # ---------- UNIX SAFE SESSION WRAPPER ----------
  - path: ".det-tools/bin/safe-ai-session"
    os: ["linux","mac"]
    mode: "0755"
    content: |
      #!/usr/bin/env bash
      set -euo pipefail
      TOOL_EXEC="${1:-}"; shift || true
      if [[ -z "${TOOL_EXEC}" ]]; then
        echo "usage: safe-ai-session <tool_exec> [args...]"; exit 2
      fi
      export AI_TOOL_NAME="$(basename "$TOOL_EXEC")"
      git add -A || true
      git commit -m "checkpoint: before ${AI_TOOL_NAME}" --no-verify || true
      SESSION="${AI_TOOL_NAME}/$(date +%Y%m%d_%H%M%S)"
      git checkout -b "$SESSION" 2>/dev/null || git checkout "$SESSION"
      "$TOOL_EXEC" "$@" || true
      git add -A || true
      git commit -m "checkpoint: after ${AI_TOOL_NAME}" --no-verify || true
      git push -u origin "$SESSION" --force-with-lease || true
      echo "session_branch:${SESSION}"

  # ---------- WORKTREES SETUP ----------
  - path: ".det-tools/setup-worktrees.sh"
    os: ["linux","mac"]
    mode: "0755"
    content: |
      #!/usr/bin/env bash
      set -euo pipefail
      MAIN_REPO=$(pwd)
      tools=("claude" "codex" "gemini")
      for tool in "${tools[@]}"; do
        WORKTREE_DIR="../${tool}-workspace"
        BRANCH="tool/${tool}/main"
        git branch "$BRANCH" 2>/dev/null || true
        git worktree add "$WORKTREE_DIR" "$BRANCH" 2>/dev/null || echo "exists:${WORKTREE_DIR}"
        echo "worktree:${tool}:${WORKTREE_DIR}:${BRANCH}"
      done

  # ---------- VS CODE SETTINGS (OPTIONAL) ----------
  - path: ".vscode/settings.json"
    os: ["linux","mac","windows"]
    mode: "0644"
    content: |
      {
        "files.autoSave": "afterDelay",
        "files.autoSaveDelay": 1000,
        "git.autoStash": true,
        "git.autoFetch": "all",
        "git.enableSmartCommit": true,
        "git.postCommitCommand": "push",
        "git.useForcePushWithLease": true,
        "workbench.localHistory.enabled": true
      }

per_tool:
  claude_code:
    tool_exec:
      windows: "claude"    # change if your binary differs
      unix: "claude"
    wrappers:
      windows: |
        # Run a safe Claude session on Windows
        tool-safe -tool_exec "claude" -- <args>
      unix: |
        # Run a safe Claude session on Unix
        .det-tools/bin/safe-ai-session "claude" <args>
    branches:
      session_pattern: "claude/{timestamp}"
      dedicated_branch: "tool/claude/main"

  codex:
    tool_exec:
      windows: "codex"      # change to your codex CLI entrypoint
      unix: "codex"
    wrappers:
      windows: |
        tool-safe -tool_exec "codex" -- <args>
      unix: |
        .det-tools/bin/safe-ai-session "codex" <args>
    branches:
      session_pattern: "codex/{timestamp}"
      dedicated_branch: "tool/codex/main"

  gemini:
    tool_exec:
      windows: "gemini"     # change to your gemini CLI entrypoint
      unix: "gemini"
    wrappers:
      windows: |
        tool-safe -tool_exec "gemini" -- <args>
      unix: |
        .det-tools/bin/safe-ai-session "gemini" <args>
    branches:
      session_pattern: "gemini/{timestamp}"
      dedicated_branch: "tool/gemini/main"

github_cli:
  checkpoint:
    name: "gh-checkpoint"
    bash: |
      set -euo pipefail
      git add -A
      git commit -m "chore(checkpoint): ${CONTEXT:-manual}" --no-verify || true
      git push --force-with-lease origin HEAD
    pwsh: |
      git add -A
      git commit -m "chore(checkpoint): $env:CONTEXT" --no-verify | Out-Null
      git push --force-with-lease origin HEAD | Out-Null
  status:
    bash: |
      gh pr status || true
      git status --porcelain --branch
    pwsh: |
      gh pr status
      git status --porcelain --branch
  create_pr:
    bash: |
      gh pr create --fill --base main || true
    pwsh: |
      gh pr create --fill --base main

install:
  steps:
    - "Write 'files[*].content' to 'files[*].path' with given mode."
    - "Run: git config --local --add include.path ./.gitconfig.local (optional)"
    - "Apply 'git.config.local_ini' into '.git/config' or via 'git config' commands."
    - "For Windows: dot-source '.det-tools/profiles/ZeroTouchGitProfile.ps1' in $PROFILE."
    - "For Unix: ensure '.det-tools/bin' is in PATH and hooks are executable."

usage:
  quickstart_windows:
    - "Open repo in PowerShell."
    - "Add to profile: . $PWD/.det-tools/profiles/ZeroTouchGitProfile.ps1"
    - "Run a safe session: tool-safe -tool_exec "claude" -- --help"
  quickstart_unix:
    - "chmod +x .git/hooks/* .det-tools/bin/safe-ai-session .det-tools/setup-worktrees.sh"
    - "Run: .det-tools/bin/safe-ai-session claude --help"

tests:
  - name: "auto-save-on-exit"
    steps:
      - "Modify a file; close shell; reopen; verify commit with 'WIP: Auto-save on exit' exists."
  - name: "session-branch-created"
    steps:
      - "Run safe session; ensure branch 'claude/YYYYMMDD_HHMMSS' exists on remote."
  - name: "checkpoint-command"
    steps:
      - "Set CONTEXT=manual-test; run checkpoint; verify push succeeded."

observability:
  logs:
    - ".det-tools/audit/git_operations.jsonl (optional future extension)"
  metrics:
    - "commits_per_session"
    - "wip_branches_created"
    - "push_success_rate"

safety:
  rules:
    - "Never hard-reset main via automation."
    - "Always push with --force-with-lease (not --force)."
    - "All auto-commits should be conventional or 'WIP' tagged."